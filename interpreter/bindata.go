// Code generated by go-bindata.
// sources:
// dslrunner.js
// DO NOT EDIT!

package interpreter

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dslrunnerJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x52\x4b\x6e\xc2\x30\x10\xdd\xfb\x14\xb3\x22\x46\xa0\x1c\xa0\x52\x96\xad\xd4\x75\x97\x08\x55\x89\x3b\x21\x6e\x21\x89\xec\x31\x2a\x42\xb9\x7b\x3d\x76\x70\x1c\x54\xaf\xe0\xf9\x7d\x66\x9e\x73\xad\x0d\x68\xc2\x8b\x85\x0a\x0e\x47\xc1\x7f\x87\x91\xf4\xd0\x33\x70\x9f\x02\xa0\x9c\x31\xd8\x13\x03\x81\xfa\x12\x15\x93\x10\xad\xeb\x15\x93\x41\x0d\x7d\xab\x4f\xce\xa0\x64\xb9\x85\x2d\xdc\x05\xf8\xa3\x5b\x90\x01\xd8\x6c\x80\x6e\x23\x0e\x6d\xbc\xaf\x2a\x28\x86\xe6\x1b\x15\x15\x0f\x2a\x9f\x25\x9a\x59\x01\x9e\x44\x9e\xc3\xc1\x32\x86\xed\x41\xd5\xe7\x73\x53\xab\x1f\x76\x08\xdc\x85\xd6\x6b\xfa\x70\xcd\x3b\x8f\x29\xf3\x80\x28\x2d\xb3\x8d\x63\xc6\x5a\x6e\xd0\xaf\x6c\x71\xa5\xe4\x22\x46\x83\x57\xaf\x9a\xfb\x58\x4c\x53\x3f\xd1\x5e\xa4\x1b\x32\xb7\xcc\x22\x70\xe7\x99\xe5\x36\xc1\x93\x07\x49\x75\x20\xf1\x57\x61\x28\x60\xfb\x24\x5a\xaf\xb3\xf6\x8b\x0b\x7d\xa1\x55\xb0\xf3\xa5\xc2\xe1\xf5\xe1\xe2\x6d\xdd\xa9\xa3\xbd\x07\x77\x90\xbc\xfd\xef\xe2\x58\x94\x64\xf4\x25\x9f\x41\xfc\xb3\x0d\xaf\x9b\xf7\xf3\x34\x86\xc8\xd8\xb1\xd1\x72\x74\xb6\x9b\x9f\x67\xbe\xe7\x0f\xe0\xb3\xd4\xf6\x6d\xee\x56\xa6\x47\x5b\xc2\x53\xdd\x62\xfa\x0b\x00\x00\xff\xff\x40\x75\xd7\x4c\x8f\x02\x00\x00")

func dslrunnerJsBytes() ([]byte, error) {
	return bindataRead(
		_dslrunnerJs,
		"dslrunner.js",
	)
}

func dslrunnerJs() (*asset, error) {
	bytes, err := dslrunnerJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dslrunner.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"dslrunner.js": dslrunnerJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"dslrunner.js": &bintree{dslrunnerJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

